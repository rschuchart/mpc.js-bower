{
  "version": 3,
  "sources": [
    "node_modules/browser-pack/_prelude.js",
    "node_modules/base64-js/lib/b64.js",
    "node_modules/text-encoder-lite-module/index.js",
    "src/browser-mpc.ts",
    "src/live-mpd-objects.ts",
    "src/mpc.ts",
    "src/mpd-objects.ts",
    "src/mpd-protocol.ts"
  ],
  "names": [],
  "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",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\n;(function (exports) {\n\t'use strict';\n\n  var Arr = (typeof Uint8Array !== 'undefined')\n    ? Uint8Array\n    : Array\n\n\tvar PLUS   = '+'.charCodeAt(0)\n\tvar SLASH  = '/'.charCodeAt(0)\n\tvar NUMBER = '0'.charCodeAt(0)\n\tvar LOWER  = 'a'.charCodeAt(0)\n\tvar UPPER  = 'A'.charCodeAt(0)\n\tvar PLUS_URL_SAFE = '-'.charCodeAt(0)\n\tvar SLASH_URL_SAFE = '_'.charCodeAt(0)\n\n\tfunction decode (elt) {\n\t\tvar code = elt.charCodeAt(0)\n\t\tif (code === PLUS ||\n\t\t    code === PLUS_URL_SAFE)\n\t\t\treturn 62 // '+'\n\t\tif (code === SLASH ||\n\t\t    code === SLASH_URL_SAFE)\n\t\t\treturn 63 // '/'\n\t\tif (code < NUMBER)\n\t\t\treturn -1 //no match\n\t\tif (code < NUMBER + 10)\n\t\t\treturn code - NUMBER + 26 + 26\n\t\tif (code < UPPER + 26)\n\t\t\treturn code - UPPER\n\t\tif (code < LOWER + 26)\n\t\t\treturn code - LOWER + 26\n\t}\n\n\tfunction b64ToByteArray (b64) {\n\t\tvar i, j, l, tmp, placeHolders, arr\n\n\t\tif (b64.length % 4 > 0) {\n\t\t\tthrow new Error('Invalid string. Length must be a multiple of 4')\n\t\t}\n\n\t\t// the number of equal signs (place holders)\n\t\t// if there are two placeholders, than the two characters before it\n\t\t// represent one byte\n\t\t// if there is only one, then the three characters before it represent 2 bytes\n\t\t// this is just a cheap hack to not do indexOf twice\n\t\tvar len = b64.length\n\t\tplaceHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0\n\n\t\t// base64 is 4/3 + up to two characters of the original data\n\t\tarr = new Arr(b64.length * 3 / 4 - placeHolders)\n\n\t\t// if there are placeholders, only get up to the last complete 4 chars\n\t\tl = placeHolders > 0 ? b64.length - 4 : b64.length\n\n\t\tvar L = 0\n\n\t\tfunction push (v) {\n\t\t\tarr[L++] = v\n\t\t}\n\n\t\tfor (i = 0, j = 0; i < l; i += 4, j += 3) {\n\t\t\ttmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))\n\t\t\tpush((tmp & 0xFF0000) >> 16)\n\t\t\tpush((tmp & 0xFF00) >> 8)\n\t\t\tpush(tmp & 0xFF)\n\t\t}\n\n\t\tif (placeHolders === 2) {\n\t\t\ttmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)\n\t\t\tpush(tmp & 0xFF)\n\t\t} else if (placeHolders === 1) {\n\t\t\ttmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)\n\t\t\tpush((tmp >> 8) & 0xFF)\n\t\t\tpush(tmp & 0xFF)\n\t\t}\n\n\t\treturn arr\n\t}\n\n\tfunction uint8ToBase64 (uint8) {\n\t\tvar i,\n\t\t\textraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes\n\t\t\toutput = \"\",\n\t\t\ttemp, length\n\n\t\tfunction encode (num) {\n\t\t\treturn lookup.charAt(num)\n\t\t}\n\n\t\tfunction tripletToBase64 (num) {\n\t\t\treturn encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)\n\t\t}\n\n\t\t// go through the array every three bytes, we'll deal with trailing stuff later\n\t\tfor (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {\n\t\t\ttemp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])\n\t\t\toutput += tripletToBase64(temp)\n\t\t}\n\n\t\t// pad the end with zeros, but make sure to not forget the extra bytes\n\t\tswitch (extraBytes) {\n\t\t\tcase 1:\n\t\t\t\ttemp = uint8[uint8.length - 1]\n\t\t\t\toutput += encode(temp >> 2)\n\t\t\t\toutput += encode((temp << 4) & 0x3F)\n\t\t\t\toutput += '=='\n\t\t\t\tbreak\n\t\t\tcase 2:\n\t\t\t\ttemp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])\n\t\t\t\toutput += encode(temp >> 10)\n\t\t\t\toutput += encode((temp >> 4) & 0x3F)\n\t\t\t\toutput += encode((temp << 2) & 0x3F)\n\t\t\t\toutput += '='\n\t\t\t\tbreak\n\t\t}\n\n\t\treturn output\n\t}\n\n\texports.toByteArray = b64ToByteArray\n\texports.fromByteArray = uint8ToBase64\n}(typeof exports === 'undefined' ? (this.base64js = {}) : exports))\n",
    "function TextEncoderLite() {\n}\nfunction TextDecoderLite() {\n}\n\n// Taken from https://github.com/feross/buffer/blob/master/index.js\n// Thanks Feross et al! :-)\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n  var i = 0\n\n  for (; i < length; i++) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (leadSurrogate) {\n        // 2 leads in a row\n        if (codePoint < 0xDC00) {\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          leadSurrogate = codePoint\n          continue\n        } else {\n          // valid surrogate pair\n          codePoint = leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00 | 0x10000\n          leadSurrogate = null\n        }\n      } else {\n        // no lead yet\n\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else {\n          // valid lead\n          leadSurrogate = codePoint\n          continue\n        }\n      }\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n      leadSurrogate = null\n    }\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x200000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction utf8Slice (buf, start, end) {\n  var res = ''\n  var tmp = ''\n  end = Math.min(buf.length, end || Infinity)\n  start = start || 0;\n\n  for (var i = start; i < end; i++) {\n    if (buf[i] <= 0x7F) {\n      res += decodeUtf8Char(tmp) + String.fromCharCode(buf[i])\n      tmp = ''\n    } else {\n      tmp += '%' + buf[i].toString(16)\n    }\n  }\n\n  return res + decodeUtf8Char(tmp)\n}\n\nfunction decodeUtf8Char (str) {\n  try {\n    return decodeURIComponent(str)\n  } catch (err) {\n    return String.fromCharCode(0xFFFD) // UTF 8 invalid char\n  }\n}\n\nTextEncoderLite.prototype.encode = function (str) {\n  var result;\n\n  if ('undefined' === typeof Uint8Array) {\n    result = utf8ToBytes(str);\n  } else {\n    result = new Uint8Array(utf8ToBytes(str));\n  }\n\n  return result;\n};\n\nTextDecoderLite.prototype.decode = function (bytes) {\n  return utf8Slice(bytes, 0, bytes.length);\n}\n\nexports.TextEncoderLite = TextEncoderLite;\nexports.TextDecoderLite = TextDecoderLite;\n",
    "/// <reference path=\"../typings/base64-js.d.ts\" />\n/// <reference path=\"../typings/text-encoder-lite.d.ts\" />\nimport * as base64 from 'base64-js';\nimport { TextEncoderLite, TextDecoderLite } from 'text-encoder-lite-module';\nimport { SocketWrapper } from './mpd-protocol';\nimport { MPC } from './mpc';\n\n/**\n * Connect to MPD via a WebSocket.\n */\nexport function viaWebSocket(uri: string): MPC {\n\treturn new MPC(new WebSocketConnection(uri));\n}\n\nexport class WebSocketConnection implements SocketWrapper {\n\n\tprivate uri: string;\n\tprivate textEncoder: TextEncoderLite;\n\tprivate textDecoder: TextDecoderLite;\n\tprivate wsClient: WebSocket;\n\t\n\tconstructor(uri: string) {\n\t\tthis.uri = uri;\n\t\tthis.textEncoder = new TextEncoderLite();\n\t\tthis.textDecoder = new TextDecoderLite();\n\t}\n\n\tconnect(receive: (msg: string) => void) {\n\t\tthis.wsClient = new WebSocket(this.uri, ['base64']);\n\t\tthis.wsClient.onmessage = (e) => receive(this.textDecoder.decode(base64.toByteArray(e.data)));\n\t}\n\t\n\tsend(msg: string) {\n\t\tthis.wsClient.send(base64.fromByteArray(this.textEncoder.encode(msg)));\n\t}\n}\n",
    "import { MPDProtocol, MPDObserver } from './mpd-protocol';\nimport { MPDStatus, MPDDirectoryEntry, MPDPlaylistItem, MPDStoredPlaylist } from './mpd-objects';\nimport { MPC } from './mpc';\n\nexport class SimpleObservable {\n\n\tprivate observers: Array<() => void> = [];\n\t\n\tregisterObserver(observer: () => void) {\n\t\tthis.observers.push(observer);\n\t}\n\t\n\tunregisterObserver(observer: () => void) {\n\t\tthis.observers = this.observers.filter(o => (o !== observer));\n\t}\n\t\n\tnotifyObservers() {\n\t\tthis.observers.forEach(o => o());\n\t}\n}\n\nexport class LiveStatus extends SimpleObservable implements MPDObserver {\n\n\tprivate mpc: MPC;\t\n\tmpdStatus: MPDStatus;\n\n\tconstructor(mpc: MPC) {\n\t\tsuper();\n\t\tthis.mpc = mpc;\n\t\tmpc.registerObserver(this);\n\t\tthis.fetchStatus();\n\t}\n\n\tsubsystemsChanged(subsystems: string[]) {\n\t\tvar statusChanged = subsystems.some((subsystem) => \n\t\t\t((subsystem == 'player') || (subsystem == 'options') || (subsystem == 'mixer') || (subsystem == 'playlist')));\n\t\tif (statusChanged) {\n\t\t\tthis.fetchStatus();\n\t\t}\n\t}\n\t\n\tfetchStatus() {\n\t\tthis.mpc.getStatus().then((mpdStatus) => {\n\t\t\tthis.mpdStatus = mpdStatus;\n\t\t\tthis.notifyObservers();\n\t\t});\n\t}\n}\n\nexport class LiveCurrentPlaylist extends SimpleObservable implements MPDObserver {\n\n\tprivate mpc: MPC;\t\n\tplaylist: MPDPlaylistItem[];\n\t\n\tconstructor(mpc: MPC) {\n\t\tsuper();\n\t\tthis.mpc = mpc;\n\t\tmpc.registerObserver(this);\n\t\tthis.fetchPlaylist();\n\t}\n\n\tsubsystemsChanged(subsystems: string[]) {\n\t\tvar statusChanged = subsystems.some((subsystem) => (subsystem == 'playlist'));\n\t\tif (statusChanged) {\n\t\t\tthis.fetchPlaylist();\n\t\t}\n\t}\n\t\n\tfetchPlaylist() {\n\t\tthis.mpc.getCurrentPlaylist().then((playlist) => {\n\t\t\tthis.playlist = playlist;\n\t\t\tthis.notifyObservers();\n\t\t});\n\t}\n}\n\nexport class LiveStoredPlaylists extends SimpleObservable implements MPDObserver {\n\n\tprivate mpc: MPC;\t\n\tstoredPlaylists: MPDStoredPlaylist[];\n\n\tconstructor(mpc: MPC) {\n\t\tsuper();\n\t\tthis.mpc = mpc;\n\t\tmpc.registerObserver(this);\n\t\tthis.fetchStoredPlaylists();\n\t}\n\n\tsubsystemsChanged(subsystems: string[]) {\n\t\tvar statusChanged = subsystems.some((subsystem) => (subsystem == 'stored_playlist'));\n\t\tif (statusChanged) {\n\t\t\tthis.fetchStoredPlaylists();\n\t\t}\n\t}\n\t\n\tprivate fetchStoredPlaylists() {\n\t\tthis.mpc.getStoredPlaylists().then((storedPlaylists) => {\n\t\t\tthis.storedPlaylists = storedPlaylists;\n\t\t\tthis.notifyObservers();\n\t\t});\n\t}\n}\n\nexport class LiveDirectories implements MPDObserver {\n\n\tprivate mpc: MPC;\t\n\tprivate directories: Map<string, MPDDirectoryEntry[]>;\n\tprivate observers: Array<(cause: string) => void> = [];\n\t\n\tregisterObserver(observer: (cause: string) => void) {\n\t\tthis.observers.push(observer);\n\t}\n\t\n\tunregisterObserver(observer: (cause: string) => void) {\n\t\tthis.observers = this.observers.filter(o => (o !== observer));\n\t}\n\t\n\tnotifyObservers(cause: string) {\n\t\tthis.observers.forEach(o => o(cause));\n\t}\n\t\n\tconstructor(mpc: MPC) {\n\t\tthis.mpc = mpc;\n\t\tthis.directories = new Map<string, MPDDirectoryEntry[]>();\n\t\tmpc.registerObserver(this);\n\t}\n\n\tsubsystemsChanged(subsystems: string[]) {\n\t\tvar statusChanged = subsystems.some((subsystem) => (subsystem == 'database'));\n\t\tif (statusChanged) {\n\t\t\tthis.refetchDirectories();\n\t\t}\n\t}\n\t\n\tisWatching(path: string): boolean {\n\t\treturn this.directories.has(path);\n\t}\n\t\n\twatch(path: string): Promise<MPDDirectoryEntry[]> {\n\t\tif (this.isWatching(path)) {\n\t\t\treturn Promise.resolve(this.directories.get(path));\n\t\t} else {\n\t\t\tvar promise = this.mpc.getDirectory(path);\n\t\t\tpromise.then((directory) => {\n\t\t\t\tthis.directories.set(path, directory);\n\t\t\t\tthis.notifyObservers('watch');\n\t\t\t});\n\t\t\treturn promise;\n\t\t}\n\t}\n\t\n\tunwatch(path: string) {\n\t\tif (this.isWatching(path)) {\n\t\t\tthis.directories.delete(path);\n\t\t\tthis.notifyObservers('unwatch');\n\t\t}\n\t}\n\t\n\ttoggleWatch(path: string) {\n\t\tif (this.isWatching(path)) {\n\t\t\tthis.unwatch(path);\n\t\t} else {\n\t\t\tthis.watch(path);\n\t\t}\n\t}\n\t\n\tgetWatchedDirectory(path: string): MPDDirectoryEntry[] {\n\t\treturn this.directories.get(path);\n\t}\n\t\n\tprivate refetchDirectories() {\n\n\t\tvar paths: string[] = [];\n\t\tthis.directories.forEach((content, path) => {\n\t\t\tpaths.push(path);\n\t\t});\n\t\t\n\t\tvar promises = paths.map((path) => this.getDirectoryIfExists(path));\n\t\t\n\t\tPromise.all(promises).then((newDirectories) => {\n\n\t\t\tthis.directories.clear();\n\n\t\t\tfor (var i = 0; i < paths.length; i++) {\n\t\t\t\tif (newDirectories[i] !== undefined) {\n\t\t\t\t\tthis.directories.set(paths[i], newDirectories[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tthis.notifyObservers('update');\n\t\t});\n\t}\n\n\tprivate getDirectoryIfExists(path: string): Promise<MPDDirectoryEntry[]> {\n\t\tvar promise = this.mpc.getDirectory(path);\n\t\treturn new Promise<MPDDirectoryEntry[]>((resolve, reject) => {\n\t\t\tpromise.then(resolve, (reason) => resolve(undefined));\n\t\t});\n\t}\n}\n",
    "/// <reference path=\"../typings/es6-promise.d.ts\" />\n/// <reference path=\"../typings/es6-map.d.ts\" />\nimport { SocketWrapper, MPDProtocol } from './mpd-protocol';\nimport { MPDStatus, MPDDirectoryEntryType, MPDDirectoryEntry, MPDDirectory, MPDMusicFile, MPDPlaylistItem, MPDStoredPlaylist } from './mpd-objects';\n\n/**\n * Implements the [commands](http://www.musicpd.org/doc/protocol/command_reference.html)\n * of the [Music Player Daemon protocol](http://www.musicpd.org/doc/protocol/index.html)\n */\nexport class MPC extends MPDProtocol {\n\t\n\t/**\n\t * Create an instance that connects to the daemon via the given connection.\n\t */\n\tconstructor(connection: SocketWrapper) {\n\t\tsuper(connection);\n\t}\n\n\tgetStatus(): Promise<MPDStatus> {\n\t\treturn this.sendCommand('status').then(\n\t\t\t(msg) => this.parse<MPDStatus>(msg, [], (valueMap) => new MPDStatus(valueMap))[0]);\n\t}\n\t\n\tgetCurrentPlaylist(): Promise<MPDPlaylistItem[]> {\n\t\treturn this.sendCommand('playlistinfo').then(\n\t\t\t(msg) => this.parse<MPDPlaylistItem>(msg, ['file'], (valueMap) => new MPDPlaylistItem(valueMap)));\n\t}\n\n\t/**\n\t * Add a song to the current playlist.\n\t * @param path\tThe path of the song to add.\n\t * @param index\tThe position within the current playlist where the song should be added.\n\t * \t\t\t\tIf no index (or a negative index) is given, the song will be added to the end\n\t * \t\t\t\tof the playlist.\n\t */\n\taddToCurrentPlaylist(path: string, index: number = -1) {\n\t\tvar cmdString = 'addid \"' + path + '\"';\n\t\tif (index >= 0) {\n\t\t\tcmdString += ' ' + index;\n\t\t}\n\t\tthis.sendCommand(cmdString);\n\t}\n\t\n\tremoveFromCurrentPlaylist(index: number) {\n\t\tthis.sendCommand('delete ' + index);\n\t}\n\n\t/**\n\t * Move a bunch of songs within the current playlist. The songs will be moved to the\n\t * given target index in the order in which they currently appear in the playlist.\n\t */\n\tmoveInCurrentPlaylist(sourceIndices: number[], targetIndex: number) {\n\t\tsourceIndices.sort((a: number, b: number) => (a - b))\n\t\tfor (var i = 0; i < sourceIndices.length; i++) {\n\t\t\tvar sourceIndex = sourceIndices[i];\n\t\t\tif (sourceIndex < targetIndex) {\n\t\t\t\tsourceIndex -= i;\n\t\t\t\ttargetIndex--;\n\t\t\t}\n\t\t\tthis.sendCommand('move ' + sourceIndex + \" \" + targetIndex);\n\t\t\ttargetIndex++;\n\t\t}\n\t}\n\t\n\tclearCurrentPlaylist() {\n\t\tthis.sendCommand('clear');\n\t}\n\n\tplay() {\n\t\tthis.sendCommand('play');\n\t}\n\n\tpause() {\n\t\tthis.sendCommand('pause');\n\t}\n\n\tstop() {\n\t\tthis.sendCommand('stop');\n\t}\n\n\tprevious() {\n\t\tthis.sendCommand('previous');\n\t}\n\n\tnext() {\n\t\tthis.sendCommand('next');\n\t}\n\t\n\t/**\n\t * Jump to the song with the given index and start playing.\n\t */\n\tjump(index: number) {\n\t\tthis.sendCommand('play ' + index);\n\t}\n\n\t/**\n\t * Seek within the currently playing song.\n\t * @param time\tThe position (in seconds, fractions allowed) to seek to.\n\t */    \n    seek(time: number) {\n        this.sendCommand('seekcur ' + time);\n    }\n\n\t/**\n\t * Search the music database for songs that have a tag containing the given string.\n\t * The search is case-insensitive.\n\t */\n\tsearch(what: string): Promise<MPDMusicFile[]> {\n\t\treturn this.sendCommand('search any ' + what).then((msg) => \n\t\t\tthis.parse<MPDMusicFile>(msg, ['file'], (valueMap) => new MPDMusicFile(valueMap)));\n\t}\n\n\tgetDirectory(path: string): Promise<MPDDirectoryEntry[]> {\n\t\treturn this.sendCommand('lsinfo \"' + path + '\"').then((msg) =>\n\t\t\tthis.parse<MPDDirectoryEntry>(msg, ['file', 'directory', 'playlist'], \n\t\t\t\t(valueMap) => MPDDirectoryEntry.fromValueMap(valueMap)));\n\t}\n\n\t/**\n\t * Get the music files from the directory with the given path and its subdirectories.\n\t * @param recurseLevels\tThe number of directory levels to recurse into. If no number (or 0) is given,\n\t * \t\t\t\t\t\tonly music files from the top directory are returned, if 1 is given, music\n\t * \t\t\t\t\t\tfiles from the top directory and its immediate subdirectories are returned,\n\t * \t\t\t\t\t\tand so on. If a negative number is given, the recursion is unlimited.\n\t */\n\tgetFilesInDirectory(directoryPath: string, recurseLevels: number = 0): Promise<MPDMusicFile[]> {\n\t\treturn this.getDirectory(directoryPath).then((entries) => {\n\t\t\tvar files: MPDMusicFile[] = [];\n\t\t\tvar directoryPromises: Promise<MPDMusicFile[]>[] = [];\n\t\t\tentries.forEach(entry => {\n\t\t\t\tif (entry.entryType == MPDDirectoryEntryType.MusicFile) {\n\t\t\t\t\tfiles.push(<MPDMusicFile>entry);\n\t\t\t\t} else if (entry.entryType == MPDDirectoryEntryType.Directory) {\n\t\t\t\t\tif (recurseLevels != 0) {\n\t\t\t\t\t\tdirectoryPromises.push(this.getFilesInDirectory(entry.path, recurseLevels - 1));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\treturn Promise.all(directoryPromises).then((filesFromSubDirectories) => {\n\t\t\t\tfilesFromSubDirectories.forEach((moreFiles) => {\n\t\t\t\t\tfiles = files.concat(moreFiles);\n\t\t\t\t});\n\t\t\t\treturn files;\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Get the music files in a playlist\n\t * @param nameOrPath\tThis is either the name of a playlist stored using [[storeCurrentPlaylist]]\n\t * \t\t\t\t\t\tor the path of a playlist file in the music database.\n\t */\n\tgetPlaylist(nameOrPath: string): Promise<MPDMusicFile[]> {\n\t\treturn this.sendCommand('listplaylistinfo \"' + nameOrPath + '\"').then((msg) => \n\t\t\tthis.parse<MPDMusicFile>(msg, ['file'], valueMap => new MPDMusicFile(valueMap)));\n\t}\n\n\t/**\n\t * Get the metadata for all playlists stored using [[storeCurrentPlaylist]].\n\t */\t\n\tgetStoredPlaylists(): Promise<MPDStoredPlaylist[]> {\n\t\treturn this.sendCommand('listplaylists').then((msg) => \n\t\t\tthis.parse<MPDStoredPlaylist>(msg, ['playlist'], (valueMap) => new MPDStoredPlaylist(valueMap)));\n\t}\n\n\t/**\n\t * Remove a playlist stored using [[storeCurrentPlaylist]]\n\t */\n\tremoveStoredPlaylist(name: string) {\n\t\tthis.sendCommand('rm \"' + name + '\"');\n\t}\n\n\t/**\n\t * Append a playlist stored using [[storeCurrentPlaylist]] to the current playlist.\n\t */\n\tloadStoredPlaylist(name: string) {\n\t\tthis.sendCommand('load \"' + name + '\"');\n\t}\n\t\n\t/**\n\t * Store the current playlist.\n\t */\n\tstoreCurrentPlaylist(name: string) {\n\t\tthis.sendCommand('save \"' + name + '\"');\n\t}\n\n\t/**\n\t * Start updating the music database: find new files, remove deleted files, update modified files.\n\t * @param directoryPath\tUpdate only this directory and its subdirectories.\n\t */\n\tupdate(directoryPath?: string) {\n\t\tvar cmdString = 'update';\n\t\tif (directoryPath) {\n\t\t\tcmdString += ' \"' + directoryPath + '\"';\n\t\t}\n\t\tthis.sendCommand(cmdString);\n\t}\n\t\n\t/**\n\t * Start rescanning the music database. Same as [[update]], but also rescans unmodified files.\n\t * @param directoryPath\tRescan only this directory and its subdirectories.\n\t */\n\trescan(directoryPath?: string) {\n\t\tvar cmdString = 'rescan';\n\t\tif (directoryPath) {\n\t\t\tcmdString += ' \"' + directoryPath + '\"';\n\t\t}\n\t\tthis.sendCommand(cmdString);\n\t}\n}\n",
    "/// <reference path=\"../typings/es6-map.d.ts\" />\n\n/**\n * The current status of the player.\n */\nexport class MPDStatus {\n\t\n\t/**\n\t * \"play\", \"stop\", or \"pause\"\"\n\t */\n\tstate: string;\n\t\n\t/**\n\t * index of the currently playing song within the playlist\n\t */\n\tsong: number;\n\t\n\t/**\n\t * Playlist songid of the currently playing song\n\t */\n\tsongId: number;\n\t\n\t/**\n\t * Total time (in seconds) elapsed within the current song\n\t */\n\telapsed: number;\n\n\t/**\n\t * 0-100\n\t */\n\tvolume: number;\n\tplaylistVersion: number;\n\tplaylistLength: number;\n\n\trepeat: boolean;\n\trandom: boolean;\n\tsingle: boolean;\n\tconsume: boolean;\n\n\t/**\n\t * Instantaneous bitrate in kbps\n\t */\n\tbitrate: number;\n\t\n\t/**\n\t * sampleRate:bits:channels\n\t */\n\taudio: string;\n\t\n\tconstructor(valueMap: Map<string, string>) {\n\t\tthis.state = valueMap.get('state');\n\t\tthis.song = Number(valueMap.get('song'));\n\t\tthis.songId = Number(valueMap.get('songid'));\n\t\tthis.elapsed = Number(valueMap.get('elapsed'));\n\t\tthis.volume = Number(valueMap.get('volume'));\n\t\tthis.playlistVersion = Number(valueMap.get('playlist'));\n\t\tthis.playlistLength = Number(valueMap.get('playlistlength'));\n\t\tthis.repeat = Boolean(Number(valueMap.get('repeat')));\n\t\tthis.random = Boolean(Number(valueMap.get('random')));\n\t\tthis.single = Boolean(Number(valueMap.get('single')));\n\t\tthis.consume = Boolean(Number(valueMap.get('consume')));\n\t\tthis.bitrate = Number(valueMap.get('bitrate'));\n\t\tthis.audio = valueMap.get('audio');\n\t}\n}\n\n/**\n * The types of objects in the music database\n */\nexport enum MPDDirectoryEntryType { Directory, MusicFile, Playlist }\n\n/**\n * Base class for objects in the music database.\n */\nexport class MPDDirectoryEntry {\n\n\tpath: string;\n\tlastModified: Date;\n\tentryType: MPDDirectoryEntryType;\n\n\tstatic fromValueMap(valueMap: Map<string, string>): MPDDirectoryEntry {\n\t\tif (valueMap.get('file')) {\n\t\t\treturn new MPDMusicFile(valueMap);\n\t\t} else if (valueMap.get('directory')) {\n\t\t\treturn new MPDDirectory(valueMap);\n\t\t} else if (valueMap.get('playlist')) {\n\t\t\treturn new MPDPlaylist(valueMap);\n\t\t}\n\t}\n\n\t/**\n\t * Get the file/directory name from the path of this object\n\t */\t\n\tgetName(): string {\n\t\tvar separatorIndex = this.path.lastIndexOf('/');\n\t\tif (separatorIndex >= 0) {\n\t\t\treturn this.path.substring(separatorIndex + 1);\n\t\t} else {\n\t\t\treturn this.path;\n\t\t}\n\t}\n\t\n\t/**\n\t * Get the BasePath of this object\n\t */\t\n\tgetBasePath(): string {\n\t\tvar separatorIndex = this.path.lastIndexOf('/');\n\t\tif (separatorIndex >= 0) {\n\t\t\treturn this.path.substring(0, separatorIndex);\n\t\t} else {\n\t\t\treturn '';\n\t\t}\n\t}\n}\n\n/**\n * Metadata for a music file.\n */\nexport class MPDMusicFile extends MPDDirectoryEntry {\n\n\ttitle: string;\n\tartist: string;\n\talbum: string;\n\talbumArtist: string;\n\tdate: string;\n\tgenre: string;\n\tduration: number;\n\t\n\tconstructor(valueMap: Map<string, string>) {\n\t\tsuper();\n\t\tthis.path = valueMap.get('file');\n\t\tthis.lastModified = new Date(valueMap.get('Last-Modified'));\n\t\tthis.title = valueMap.get('Title');\n\t\tthis.artist = valueMap.get('Artist');\n\t\tthis.album = valueMap.get('Album');\n\t\tthis.albumArtist = valueMap.get('AlbumArtist');\n\t\tthis.date = valueMap.get('Date');\n\t\tthis.genre = valueMap.get('Genre');\n\t\tthis.duration = Number(valueMap.get('Time'));\n\t\tthis.entryType = MPDDirectoryEntryType.MusicFile;\n\t\t\n\t\tif (!this.title && this.path) {\n\t\t\tvar filename = this.getName();\n\t\t\tvar suffixIndex = filename.lastIndexOf('.');\n\t\t\tif (suffixIndex > 0) {\n\t\t\t\tthis.title = filename.substring(0, suffixIndex);\n\t\t\t} else {\n\t\t\t\tthis.title = filename;\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * Metadata for a directory.\n */\nexport class MPDDirectory extends MPDDirectoryEntry {\n\n\tconstructor(valueMap: Map<string, string>) {\n\t\tsuper();\n\t\tthis.path = valueMap.get('directory');\n\t\tthis.lastModified = new Date(valueMap.get('Last-Modified'));\n\t\tthis.entryType = MPDDirectoryEntryType.Directory;\n\t}\n}\n\n/**\n * Metadata for a playlist file.\n */\nexport class MPDPlaylist extends MPDDirectoryEntry {\n\n\tconstructor(valueMap: Map<string, string>) {\n\t\tsuper();\n\t\tthis.path = valueMap.get('playlist');\n\t\tthis.lastModified = new Date(valueMap.get('Last-Modified'));\n\t\tthis.entryType = MPDDirectoryEntryType.Playlist;\n\t}\n}\n\n/**\n * An entry in a playlist.\n */\nexport class MPDPlaylistItem {\n\n\tid: number;\n\tposition: number;\t\n\ttitle: string;\n\tartist: string;\n\talbum: string;\n\talbumArtist: string;\n\tdate: string;\n\tgenre: string;\n\tduration: number;\n\tpath: string;\n\tlastModified: Date;\n\t\n\tconstructor(valueMap: Map<string, string>) {\n\t\tthis.id = Number(valueMap.get('Id'));\n\t\tthis.position = Number(valueMap.get('Pos'));\n\t\tthis.title = valueMap.get('Title');\n\t\tthis.artist = valueMap.get('Artist');\n\t\tthis.album = valueMap.get('Album');\n\t\tthis.albumArtist = valueMap.get('AlbumArtist');\n\t\tthis.date = valueMap.get('Date');\n\t\tthis.genre = valueMap.get('Genre');\n\t\tthis.duration = Number(valueMap.get('Time'));\n\t\tthis.path = valueMap.get('file');\n\t\tthis.lastModified = new Date(valueMap.get('Last-Modified'));\n\t\t\n\t\tif (!this.title && this.path) {\n\t\t\tvar filename = this.path;\n\t\t\t\n\t\t\tvar separatorIndex = this.path.lastIndexOf('/');\n\t\t\tif (separatorIndex >= 0) {\n\t\t\t\tfilename = filename.substring(separatorIndex + 1);\n\t\t\t}\n\t\t\t\n\t\t\tvar suffixIndex = filename.lastIndexOf('.');\n\t\t\tif (suffixIndex > 0) {\n\t\t\t\tthis.title = filename.substring(0, suffixIndex);\n\t\t\t} else {\n\t\t\t\tthis.title = filename;\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * Metadata for a stored playlist.\n */\nexport class MPDStoredPlaylist {\n\n\tname: string\n\tlastModified: Date;\n\n\tconstructor(valueMap: Map<string, string>) {\n\t\tthis.name = valueMap.get('playlist');\n\t\tthis.lastModified = new Date(valueMap.get('Last-Modified'));\n\t}\n}\n",
    "/// <reference path=\"../typings/es6-promise.d.ts\" />\n\n/**\n * Implements the [general syntax](http://www.musicpd.org/doc/protocol/syntax.html)\n * of the [Music Player Daemon protocol](http://www.musicpd.org/doc/protocol/index.html)\n */\nexport class MPDProtocol {\n\n\tprivate static failureRegExp = /ACK \\[([0-9]+)@[0-9]+\\] \\{[^\\}]*\\} (.*)/;\n\t\n\tprivate connection: SocketWrapper;\n\tprivate observers: MPDObserver[];\n\n\tprivate initialising: boolean;\n\tprivate idle: boolean;\n\tprivate runningRequests: MPDRequest[];\n\tprivate queuedRequests: MPDRequest[];\n\tprivate receivedLines: string[];\n\t\n\t/**\n\t * The major version of the connected daemon\n\t */\n\tmpdMajorVersion: number;\n\n\t/**\n\t * The minor version of the connected daemon\n\t */\n\tmpdMinorVersion: number;\n\t\n\t/**\n\t * The patch version of the connected daemon\n\t */\n\tmpdPatchVersion: number;\n\n\t/**\n\t * Create an instance that connects to the daemon via the given connection.\n\t */\n\tconstructor(connection: SocketWrapper) {\n\t\tthis.connection = connection;\n\t\tthis.connection.connect((msg) => this.processReceivedMessage(msg));\n\t\tthis.initialising = true;\n\t\tthis.idle = false;\n\t\tthis.queuedRequests = [];\n\t\tthis.observers = [];\n\t\tthis.receivedLines = [];\n\t}\n\n\t/**\n\t * Register an observer that will get notified when there is a change in one of the daemon's subsystems.\n\t */\n\tregisterObserver(observer: MPDObserver) {\n\t\tthis.observers.push(observer);\n\t}\n\n\tunregisterObserver(observer: MPDObserver) {\n\t\tvar index = this.observers.indexOf(observer);\n\t\tif (index >= 0) {\n\t\t\tthis.observers.splice(index, 1);\n\t\t}\n\t}\n\n\t/**\n\t * Send a command to the daemon. The returned promise will be resolved with an array \n\t * containing the lines of the daemon's response.\n\t */\t\n\tsendCommand(cmd: string): Promise<string[]> {\n\t\treturn new Promise<string[]>((resolve, reject) => {\n\t\t\tvar mpdRequest = new MPDRequest(cmd, (lines: string[]) => resolve(lines), (mpdError: MPDError) => reject(mpdError));\n\t\t\tthis.enqueueRequest(mpdRequest);\n\t\t});\n\t}\n\n\t/**\n\t * Parse the daemon response for a command.\n\t * @param lines\t\tThe daemon response.\n\t * @param markers\tMarkers are keys denoting the start of a new object within the response.\n\t * @param convert\tConverts a key-value Map from the response into the desired target object. \n\t */\t\n\tparse<T>(lines: string[], markers: string[], convert: (valueMap: Map<string, string>) => T): T[] {\n\t\tvar result = new Array<T>();\n\t\tvar currentValueMap = new Map<string, string>();\n\t\tvar lineCount = 0;\n\n\t\tlines.forEach((line) => {\n\t\t\tvar colonIndex = line.indexOf(':');\n\t\t\tif (colonIndex > 0) {\n\t\t\t\tvar key = line.substring(0, colonIndex);\n\t\t\t\tvar value = line.substring(colonIndex + 2);\n\t\t\t\tif ((lineCount > 0) && markers.some(marker => (marker == key))) {\n\t\t\t\t\tresult.push(convert(currentValueMap));\n\t\t\t\t\tcurrentValueMap = new Map<string, string>();\n\t\t\t\t}\n\t\t\t\tcurrentValueMap.set(key, value);\n\t\t\t\tlineCount++;\n\t\t\t} else {\n\t\t\t\tconsole.log('Huh? \"' + line + '\" at line ' + lineCount);\n\t\t\t}\n\t\t});\n\t\tif (lineCount > 0) {\n\t\t\tresult.push(convert(currentValueMap));\n\t\t}\n\n\t\treturn result;\n\t}\t\n\n\tprivate enqueueRequest(mpdRequest: MPDRequest) {\n\t\tthis.queuedRequests.push(mpdRequest);\n\t\tif (this.idle) {\n\t\t\tthis.connection.send('noidle\\n');\n\t\t\tthis.idle = false;\n\t\t}\n\t}\n\t\n\tprivate processReceivedMessage(msg: string) {\n\t\tif (this.initialising) {\n\t\t\tthis.initialCallback(msg.substring(0, msg.length - 1));\n\t\t\tthis.initialising = false;\n\t\t\tthis.dequeueRequests();\n\t\t\treturn;\n\t\t}\n\t\tif (this.receivedLines.length > 0) {\n\t\t\tvar lastPreviousLine = this.receivedLines.pop();\n\t\t\tmsg = lastPreviousLine + msg;\n\t\t}\n\t\tvar lines = msg.split('\\n');\n\t\tfor (var i = 0; i < (lines.length - 1); i++) {\n\t\t\tvar line = lines[i];\n\t\t\tif ((line == 'list_OK') || (line == 'OK')) {\n\t\t\t\tif (this.runningRequests.length > 0) {\n\t\t\t\t\tvar req = this.runningRequests.shift();\n\t\t\t\t\treq.onFulfilled(this.receivedLines);\n\t\t\t\t\tthis.receivedLines = [];\n\t\t\t\t}\n\t\t\t} else if (stringStartsWith(line, 'ACK [')) {\n\t\t\t\tif (this.runningRequests.length > 0) {\n\t\t\t\t\tvar req = this.runningRequests.shift();\n\t\t\t\t\tvar match = MPDProtocol.failureRegExp.exec(line);\n\t\t\t\t\tif (match != null) {\n\t\t\t\t\t\tvar mpdError: MPDError = { errorCode: Number(match[1]), errorMessage: match[2] };\n\t\t\t\t\t\treq.onRejected(mpdError);\n\t\t\t\t\t\tthis.queuedRequests = this.runningRequests.concat(this.queuedRequests);\n\t\t\t\t\t\tthis.runningRequests = [];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.log('WTF? \"' + line + '\"');\n\t\t\t\t\t}\n\t\t\t\t\tthis.receivedLines = [];\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.receivedLines.push(line);\n\t\t\t}\n\t\t}\n\t\tthis.receivedLines.push(lines[lines.length - 1]);\n\t\tif ((lines.length >= 2) && (lines[lines.length - 1] == '') && \n\t\t\t((lines[lines.length - 2] == 'OK') || stringStartsWith(lines[lines.length - 2], 'ACK ['))) {\n\t\t\tthis.dequeueRequests();\n\t\t}\n\t}\n\n\tprivate dequeueRequests() {\n\t\tif (this.queuedRequests.length > 0) {\n\t\t\tthis.runningRequests = this.queuedRequests;\n\t\t\tthis.queuedRequests = [];\n\t\t\tthis.idle = false;\n\t\t} else {\n\t\t\tthis.runningRequests = [new MPDRequest('idle', (lines) => this.idleCallback(lines))];\n\t\t\tthis.idle = true;\n\t\t}\n\t\tvar commandString: string;\n\t\tif (this.runningRequests.length == 1) {\n\t\t\tcommandString = this.runningRequests[0].commandString + '\\n';\n\t\t} else {\n\t\t\tcommandString = 'command_list_ok_begin\\n';\n\t\t\tthis.runningRequests.forEach((command) => {\n\t\t\t\tcommandString += command.commandString + '\\n';\n\t\t\t});\n\t\t\tcommandString += 'command_list_end\\n';\n\t\t}\n\t\tthis.connection.send(commandString);\n\t}\n\t\n\tprivate initialCallback(msg: string) {\n\t\tvar match = /^OK MPD ([0-9]+)\\.([0-9]+)\\.([0-9]+)/.exec(msg);\n\t\tthis.mpdMajorVersion = Number(match[1]);\n\t\tthis.mpdMinorVersion = Number(match[2]);\n\t\tthis.mpdPatchVersion = Number(match[3]);\n\t}\n\n\tprivate idleCallback(lines: string[]) {\n\t\tthis.idle = false;\n\t\tvar subsystems = lines.map(changed => changed.substring(9));\n\t\tif (subsystems.length > 0) {\n\t\t\tthis.observers.forEach((observer) => observer.subsystemsChanged(subsystems));\n\t\t}\n\t}\n}\n\n/**\n * Interface for wrapping different ways of connecting to the daemon\n * (usually node.js Sockets or browser WebSockets).\n */\nexport interface SocketWrapper {\n\t/**\n\t * This method will be called to initiate the connection.\n\t * @param receive\tThis callback should be called when data from the daemon is received.\n\t */\n\tconnect(receive: (msg: string) => void);\n\t\n\t/**\n\t * This method will be called to send data to the daemon.\n\t */\n\tsend(msg: string): void;\n}\n\n/**\n * Interface for observers that want to get notified of changes in one of the daemon's subsystems.\n */\nexport interface MPDObserver {\n\t/**\n\t * This method is called when there is a change in one or more of the daemon's subsystems.\n\t * The subsystems are listed in the [MPD documentation](http://www.musicpd.org/doc/protocol/command_reference.html#status_commands)\n\t * for the \"idle\" command.\n\t */\n\tsubsystemsChanged: (subsystems: string[]) => void;\n}\n\n/**\n * A failure response from the daemon.\n */\nexport class MPDError {\n\terrorCode: number;\n\terrorMessage: string;\n}\n\nclass MPDRequest {\n\t\n\tcommandString: string;\n\tonFulfilled: (lines: string[]) => void;\n\tonRejected: (error: MPDError) => void;\n\t\n\tconstructor(commandString: string, onFulfilled: (lines: string[]) => void, onRejected?: (error: MPDError) => void) {\n\t\tthis.commandString = commandString;\n\t\tthis.onFulfilled = onFulfilled;\n\t\tthis.onRejected = onRejected;\n\t}\n}\n\nfunction stringStartsWith(str: string, prefix: string): boolean {\n\treturn ((str.length >= prefix.length) && (str.substring(0, prefix.length) == prefix));\n}\n"
  ]
}